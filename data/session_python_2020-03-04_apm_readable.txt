>>> "{}".format(5)
'5'
>>> "{}".format("toto")
'toto'
>>> "{}".format(3.14)
'3.14'
>>> "{}".format([1,2])
'[1, 2]'
>>>
>>>
>>> "{} {}".format(1, 3.13)
'1 3.13'
>>> "{} {} {}".format(1, 3.13)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: tuple index out of range
>>> "{0} {1} {0}".format(1, 3.13)
'1 3.13 1'
>>>
>>>
>>> "{:}".format(3.13)
KeyboardInterrupt
>>>
>>>
>>> 1 / 3
0.3333333333333333
>>> "{:.2f}".format(1/6)
'0.17'
>>> 1/6
0.16666666666666666
>>> "{:.3f}".format(1/6)
'0.167'
>>> "{:<7.3f}".format(1/6)
'0.167  '
>>> "{:>7.3f}".format(1/6)
'  0.167'
>>> "{:^7.3f}".format(1/6)
' 0.167 '
>>> "{:^8.3f}".format(1/6)
' 0.167  '
>>> for i in range(16):
...    print("{:>3d}".format(i))
...
  0
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
>>> for i in range(16):
...    print("{:>3d}".format(i))
KeyboardInterrupt
>>> for i in range(1, 1001, 100):
...    print("{:>3d}".format(i))
...
  1
101
201
301
401
501
601
701
801
901
>>> for i in range(1, 1101, 100):
...    print("{:>3d}".format(i))
...
  1
101
201
301
401
501
601
701
801
901
1001
>>> "{:>10s}".format("toto")
'      toto'
>>>
>>>
>>>
>>> "{:>05d}".format(i)
'01001'
>>> "{:>05d}".format(5)
'00005'
>>>
>>> perc_GC = ((4500 + 2575)/14800)*100
>>> perc_GC
47.80405405405405
>>> print("Le pourcentage de GC est {} %".format(perc_GC))
Le pourcentage de GC est 47.80405405405405 %
>>> print("Le pourcentage de GC est {:.0f} %".format(perc_GC))
Le pourcentage de GC est 48 %
>>> print("Le pourcentage de GC est {:<6.0f} %".format(perc_GC))
Le pourcentage de GC est 48     %
>>> print("Le pourcentage de GC est {:<6.1f} %".format(perc_GC))
Le pourcentage de GC est 47.8   %
>>> print("Le pourcentage de GC est {:<6.2f} %".format(perc_GC))
Le pourcentage de GC est 47.80  %
>>> print("Le pourcentage de GC est {:<6.3f} %".format(perc_GC))
Le pourcentage de GC est 47.804 %
>>>
>>> for i in range(4):
...     print("Le pourcentage de GC est {:<6.{}f} %".format(perc_GC,i))
...
Le pourcentage de GC est 48     %
Le pourcentage de GC est 47.8   %
Le pourcentage de GC est 47.80  %
Le pourcentage de GC est 47.804 %
>>> "{1:>10s} {0:<2d} {0:<2d}".format(3, "toto")
'      toto 3  3 '
>>>
Script started on Wed 04 Mar 2020 03:11:55 PM STD
[fuchs@danube ~]$ python
Python 3.7.3 | packaged by conda-forge | (default, Jul  1 2019, 21:52:21)
[GCC 7.3.0] :: Anaconda, Inc. on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
[fuchs@danube ~]$ !conda
conda activate md_python3
(md_python3) [fuchs@danube ~]$ python
Python 3.7.3 | packaged by conda-forge | (default, Jul  1 2019, 21:52:21)
[GCC 7.3.0] :: Anaconda, Inc. on linux
Oct", "Novs = [["Dec", "Jan", "Fev"], ["Mar", "Avr", "Mai"], ["Juin", "Juil", "Aou"], ["Sep", "O
>>> saisons= [["Dec", "Jan", "Fev"], ["Mar", "Avr", "Mai"], ["Juin", "Juil", "Aou"], ["Sep", "Oct", "Nov"]]
[['Dec', 'Jan', 'Fev'], ['Mar', 'Avr', 'Mai'], ['Juin', 'Juil', 'Aou'], ['Sep', 'Oct', 'Nov']]
>>> saisons[2]
['Juin', 'Juil', 'Aou']
>>> saisons[1][0]
'Mar'
>>> saisons[1:2]
[['Mar', 'Avr', 'Mai']]
>>> var = saisons[1:2]
>>> var[0][2]
'Mai'
>>> var = saisons[:2]
>>> saisons[:2]
[['Dec', 'Jan', 'Fev'], ['Mar', 'Avr', 'Mai']]
>>>
>>>
>>> liste= [0, 1, 2, 3]
>>> liste[:2]
[0, 1]
>>> liste= [[0, 1], [1, 2], [2, 5], [3, 6]]
>>> liste[:2]
[[0, 1], [1, 2]]
>>> liste[:2]
[[0, 1], [1, 2]]
>>>
>>> saisons
[['Dec', 'Jan', 'Fev'], ['Mar', 'Avr', 'Mai'], ['Juin', 'Juil', 'Aou'], ['Sep', 'Oct', 'Nov']]
>>> saisons[:]
[['Dec', 'Jan', 'Fev'], ['Mar', 'Avr', 'Mai'], ['Juin', 'Juil', 'Aou'], ['Sep', 'Oct', 'Nov']]
>>> saisons[:][2]
['Juin', 'Juil', 'Aou']
>>> saisons[:]
[['Dec', 'Jan', 'Fev'], ['Mar', 'Avr', 'Mai'], ['Juin', 'Juil', 'Aou'], ['Sep', 'Oct', 'Nov']]
>>> saisons[:][2]
['Juin', 'Juil', 'Aou']
>>>
>>> type(int(3.14))
<class 'int'>
>>> x = ((5 - 6) / 2)
>>> type(int(3.14))
<class 'int'>
>>> hiver = ['Dec', 'Jan', 'Fev']
>>> printemps = ['Mar', 'Avr', 'Mai']
>>> ete = ['Juin', 'Juil', 'Aou']
>>> automne = ['Sep', 'Oct', 'Nov']
>>> saisons = [hiver, printemps, ete, automne]
>>> saisons
[['Dec', 'Jan', 'Fev'], ['Mar', 'Avr', 'Mai'], ['Juin', 'Juil', 'Aou'], ['Sep', 'Oct', 'Nov']]
>>>
>>> x= 1 ; y = 2 ; z = 3
>>> coor = [x, y, z]
>>> coor
[1, 2, 3]
>>>
>>>
>>>
>>>
>>>
>>> (1, 2, 3)
(1, 2, 3)
>>> t = (1, 2, 3)
>>> type(t)
<class 'tuple'>
>>> l = [1, 2, 3]
>>> type(l)
<class 'list'>
>>>
>>>
>>> "{}{}{}".format(1, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: tuple index out of range
>>>
>>> t
(1, 2, 3)
>>> t[0]
1
>>> t[0] = 100
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> (x, y, z) = (1, 2, 3)
>>> x
1
>>> y
2
>>> z
3
>>>
>>> for elt in [1, 2, 3]:
...
  File "<stdin>", line 2
    ^
IndentationError: expected an indented block
>>> for elt in [1, 2, 3]:
...     print(elt)
...
1
2
3
>>> for i in range(4):
...     print(i)
...
0
1
2
3
>>>
>>> x = 3
>>> x == 3
True
>>> x == 4
False
>>> x != 4
True
>>> x < 4
True
>>> x <= 4
True
>>> x > 4
False
>>> x >= 4
False
>>>
>>> chaine = "toto"
>>> chaine == "toto"
True
>>> chaine != "tito"
True
>>> "toto" < "titi"
False
>>> "toto" < "0titi"
False
>>> "aba" < "aCa"
False
>>> "aba" > "aCa"
True
>>>
>>> i = 0
>>> i == 0
True
>>> j == 0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'j' is not defined
>>> i == 0
True
>>> i = 0
>>> while i <= 10:
...     print("Bonjour")
...     print(i)
...     i = i + 1
...
Bonjour
0
Bonjour
1
Bonjour
2
Bonjour
3
Bonjour
4
Bonjour
5
Bonjour
6
Bonjour
7
Bonjour
8
Bonjour
9
Bonjour
10
>>>
>>>
>>> var = input("Entrez un nb: ")
Entrez un nb: 17
>>> var
'17'
>>> var = int(input("Entrez un nb: "))
Entrez un nb: 18
>>> var
18
>>> var = -5
>>> while var <= 0:
...     var = int(input("Entrez un nb: "))
...
Entrez un nb: -56
Entrez un nb: 54
>>> var = -5
>>> while var <= 0:
...     var = int(input("Entrez un nb: "))
...
Entrez un nb: -56
Entrez un nb: -92
Entrez un nb: 67
>>> var = -5
>>> while var <= 0:
...     var = int(input("Entrez un nb: "))
...
Entrez un nb: -4
Entrez un nb: toto
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
ValueError: invalid literal for int() with base 10: 'toto'
>>> var = int(input("Entrez un nb: "))
Entrez un nb: 67
>>> while var <= 0:
...     var = int(input("Entrez un nb: "))
...
>>>
(md_python3) [fuchs@danube ~]$ python
Python 3.7.3 | packaged by conda-forge | (default, Jul  1 2019, 21:52:21)
[GCC 7.3.0] :: Anaconda, Inc. on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> var
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'var' is not defined
>>> while var <= 0:
...     var = int(input("Entrez un nb: "))
...
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'var' is not defined
>>>
>>>
>>> semaine = ["mo", "tu", "we", "th", "fr", "sa", "su"]
>>> for jour in semaine:
...     print(jour)
...
mo
tu
we
th
fr
sa
su
>>> semaine
['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su']
>>> for i in range(5):
...    print(semaine[i])
...
mo
tu
we
th
fr
>>> for jour in semaine[0:5]:
...    print(jour)
...
mo
tu
we
th
fr
>>> i = 5
>>> while i <= 6:
...     print(semaine[i])
...
sa
sa
sa
sa
sa
[...] Boucle infinie :-p
^Csa
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
KeyboardInterrupt
>>>
KeyboardInterrupt
>>> i = 5
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
KeyboardInterrupt
>>>
KeyboardInterrupt
>>> i = 5
>>> while i <= 6:
...     print(semaine[i])
...     i = i + 1
...
sa
su
>>> i = 0
>>> while i >= 4:
...     print(semaine[i])
...
...
>>> impairs = list(range(1, 21+1, 2))
>>> impairs
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]
>>> pairs = []
>>> pairs
[]
>>> for nb in impairs:
...      pairs.append(nb + 1)
...
>>> pairs
[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]
>>>
>>>
>>> "*" * 10
'**********'
>>>
>>> for i in range(1, 10+1):
...     print("{:>10s}".format("*"))
...
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
>>> for i in range(1, 10+1):
...     print("{:>10s}".format("*"*i))
...
         *
        **
       ***
      ****
     *****
    ******
   *******
  ********
 *********
**********
>>> N = int("Entrez un nb de ligne: ")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'Entrez un nb de ligne: '
>>> N = int(input("Entrez un nb de ligne: "))
Entrez un nb de ligne: 15
>>> for i in range(1, N+1):
...     print("{:>10s}".format("*"*i))
...
         *
        **
       ***
      ****
     *****
    ******
   *******
  ********
 *********
**********
***********
************
*************
**************
***************
>>> for i in range(1, N+1):
...     print("{:>10s}".format("*"*i))
...
KeyboardInterrupt
>>> for i in range(1, N+1):
...     print("{:>{}s}".format("*"*i, N))
...
              *
             **
            ***
           ****
          *****
         ******
        *******
       ********
      *********
     **********
    ***********
   ************
  *************
 **************
***************
>>> for i in range(10):
...    print(i, sep=" ", end="")
...
0123456789>>>
>>> for i in range(10):
...    print("{} ".format(i), end="")
...
0 1 2 3 4 5 6 7 8 9 >>>
>>>
>>>
>>> x = 2
>>> x == 2
True
>>> if x == 2:
...     print("Vrai")
...
Vrai
>>> if True:
...     print("vrai")
...
vrai
>>> x =3
>>> if x == 2:
...     print("Vrai")
... else:
...     print("Faux")
...
Faux
>>> if x == 2:
...     print("Vrai")
...     else:
  File "<stdin>", line 3
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
>>>
>>>
>>> if x == 2:
...     print(2)
... elif x == 3
  File "<stdin>", line 3
    elif x == 3
              ^
SyntaxError: invalid syntax
>>> if x == 2:
...     print(2)
... elif x == 3:
...     print(3)
... else:
...     print("Autre chose")
...
3
>>> x
3
>>> nb = [4,5,6]
>>> for n in nb:
...     if nb == 5:
...         print("Vrai")
...         print("car n vaut 5")
...
KeyboardInterrupt
>>> for n in nb:
...     if n == 5:
...          print("Vrai")
...          print("car n vaut 5")
...
Vrai
car n vaut 5
>>> for n in nb:
...     if n == 5:
...          print("car n vaut 5")
...     print("car n vaut 5")
...
car n vaut 5
car n vaut 5
car n vaut 5
car n vaut 5
>>> for n in nb:
...     if n == 5:
...          print("Vrai")
...     print("car n vaut 5")
...
car n vaut 5
Vrai
car n vaut 5
car n vaut 5
>>>
>>> True
True
>>>
>>>
>>> True and True
True
>>> True and False
False
>>> False and False
False
>>> False and True
False
>>>
>>> True or True
True
>>> True or False
True
>>> False or True
True
>>> False or False
False
>>> x, y = 3, 4
>>> x
3
>>> y
4
>>> if x == 3 and y > 3:
...     print("vrai")
...
vrai
>>> if x == 3:
...     if y > 3:
...         print("Vrai")
...
Vrai
>>>
>>>
>>> &
  File "<stdin>", line 1
    &
    ^
SyntaxError: invalid syntax
>>> not True
False
>>> not False
True
>>>
>>> x = 2
>>> not x != 2
True
>>>
>>>
>>> for i in range(5):
...      print("Bonjour")
...      if i == 3:
...           break
...      print("Au revoir", i)
...
Bonjour
Au revoir 0
Bonjour
Au revoir 1
Bonjour
Au revoir 2
Bonjour
>>>
>>>
>>> for i in range(5):
...     print("Bonjour")
...     if i == 2:
...         continue
...     print("Au revoir", i)
...
Bonjour
Au revoir 0
Bonjour
Au revoir 1
Bonjour
Bonjour
Au revoir 3
Bonjour
Au revoir 4
>>> for i in range(5):
...     if i == 2 or i == 4:
...         continue
...     print(i)
...
0
1
3
>>>
>>>
>>> 1 / 10
0.1
>>> 1 / 10 == 0.1
True
>>> 3.0 - 2.7 == 0.3
False
>>> 0.3
0.3
>>> 2.7
2.7
>>> 3.0
3.0
>>> 3.0 - 2.7
0.2999999999999998
>>> 3.0
3.0
>>> "{:.4f}".format(3.0)
'3.0000'
>>> "{:.10f}".format(3.0)
'3.0000000000'
>>> "{:.50f}".format(3.0)
'3.00000000000000000000000000000000000000000000000000'
>>> "{:.100f}".format(3.0)
'3.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
>>> "{:.100f}".format(2.7)
'2.7000000000000001776356839400250464677810668945312500000000000000000000000000000000000000000000000000'
>>> "{:.100f}".format(0.3)
'0.2999999999999999888977697537484345957636833190917968750000000000000000000000000000000000000000000000'
>>> 0.
0.0
>>> 0.3
0.3
>>>
>>> "{:.2f}".format(3.0-2.7)
'0.30'
>>> delta = 1e-5
>>> delta
1e-05
>>> x = 3.0 - 2.7
>>> 0.3 - delta < x < 0.3 + delta
True
>>> "{:.2f}".format(3.0-2.7)
'0.30'
